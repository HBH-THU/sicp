#!/usr/bin/env chicken-scheme
(use debug sicp-eval sicp-eval-amb test)

(define steps (make-parameter 0))
(define ben-steps (make-parameter 0))

(parameterize ((steps 0))
  (with-require `((< ,<)
                  (= ,=)
                  (+ ,+)
                  (* ,*)
                  (list ,list)
                  (steps ,steps))
    (lambda (env)
      (ambeval* '(define (an-integer-between low high)
                   (steps (+ (steps) 1))
                   (require (< low high))
                   (amb low (an-integer-between (+ low 1) high)))
                env)
      (ambeval* '(define (a-pythagorean-triple-between low high)
                   (let ((i (an-integer-between low high)))
                     (let ((j (an-integer-between i high)))
                       (let ((k (an-integer-between j high)))
                         (require (= (+ (* i i) (* j j)) (* k k)))
                         (list i j k)))))
                env)
      (ambeval-n '(a-pythagorean-triple-between 1 6) env 10))))

(parameterize ((ben-steps 0))
  (with-require `((< ,<)
                  (+ ,+)
                  (= ,=)
                  (* ,*)
                  (>= ,>=)
                  (list ,list)
                  (steps ,steps)
                  (sqrt ,sqrt)
                  (integer? ,integer?)
                  (debug ,(lambda x (debug x))))
    (lambda (env)
      (ambeval* '(define (an-integer-between low high)
                   (steps (+ (steps) 1))
                   (require (< low high))
                   (amb low (an-integer-between (+ low 1) high)))
                env)
      (ambeval* '(define (a-pythagorean-triple-between low high)
                   (let ((i (an-integer-between low high))
                         (hsq (* high high)))
                     (let ((j (an-integer-between i high)))
                       (let ((ksq (+ (* i i) (* j j))))
                         (debug i j)
                         (require (>= hsq ksq))
                         (let ((k (sqrt ksq)))
                           (debug i j k)
                           (require (integer? k))
                           (list i j k))))))
                env)
      (ambeval-n '(a-pythagorean-triple-between 1 6) env 10))))

(test-assert "Ben's steps are indeed fewer than the baseline."
             (< (ben-steps) (steps)))
