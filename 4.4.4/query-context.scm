;;; Solutions copyright (C) 2007, Peter Danenberg; http://wizardbook.org
;;; Source code copyright (C) 1996, MIT; http://mitpress.mit.edu/sicp

(load "query/add-assertion-body.scm")
(load "query/add-assertion!.scm")
(load "query/add-rule-or-assertion!.scm")
(load "query/add-rule!.scm")
(load "query/all-bound?.scm")
(load "query/always-true.scm")
(load "query/apply-a-rule.scm")
(load "query/apply-rules.scm")
(load "query/args.scm")
(load "query/assertion-to-be-added?.scm")
(load "query/binding-in-frame.scm")
(load "query/binding-value.scm")
(load "query/binding-variable.scm")
(load "query/bindings.scm")
(load "query/check-an-assertion.scm")
(load "query/combine.scm")
(load "query/conclusion.scm")
(load "query/conjoin.scm")
(load "query/constant-symbol?.scm")
(load "query/contents.scm")
(load "query/contract-question-mark.scm")
(load "query/depends-on?.scm")
(load "query/disjoin.scm")
(load "query/display-line.scm")
(load "query/display-stream.scm")
(load "query/empty-conjunction?.scm")
(load "query/empty-disjunction?.scm")
(load "query/execute.scm")
(load "query/expand-question-mark.scm")
(load "query/extend-if-consistent.scm")
(load "query/extend-if-possible.scm")
(load "query/extend.scm")
(load "query/fetch-assertions.scm")
(load "query/fetch-rules.scm")
(load "query/find-assertions.scm")
(load "query/first-conjunct.scm")
(load "query/first-disjunct.scm")
(load "query/flatten-stream.scm")
(load "query/get-all-assertions.scm")
(load "query/get-all-rules.scm")
(load "query/get-indexed-assertions.scm")
(load "query/get-indexed-rules.scm")
(load "query/get.scm")
(load "query/get-stream.scm")
(load "query/indexable?.scm")
(load "query/index-key-of.scm")
(load "query/initialize-data-base.scm")
(load "query/input-prompt.scm")
(load "query/install.scm")
(load "query/instantiate.scm")
(load "query/interleave-delayed.scm")
(load "query/interleave.scm")
(load "query/lisp-value.scm")
(load "query/make-binding.scm")
(load "query/make-new-variable.scm")
(load "query/make-table.scm")
(load "query/map-over-symbols.scm")
(load "query/microshaft-data-base.scm")
(load "query/negate-bind.scm")
(load "query/negate-bound.scm")
(load "query/n-ary-cartesian.scm")
(load "query/negated-query.scm")
(load "query/negate.scm")
(load "query/new-rule-application-id.scm")
(load "query/output-prompt.scm")
(load "query/parallel-execute.scm")
(load "query/pattern-match.scm")
(load "query/predicate.scm")
(load "query/prompt-for-input.scm")
(load "query/put.scm")
(load "query/qeval.scm")
(load "query/query.scm")
(load "query/query-driver-loop.scm")
(load "query/query-syntax-process.scm")
(load "query/rename-variables-in.scm")
(load "query/rest-conjuncts.scm")
(load "query/rest-disjuncts.scm")
(load "query/rule-body.scm")
(load "query/rule-counter.scm")
(load "query/rule?.scm")
(load "query/simple-query.scm")
(load "query/singleton-stream.scm")
(load "query/store-assertion-in-index.scm")
(load "query/store-rule-in-index.scm")
(load "query/stream-append-delayed.scm")
(load "query/stream-flatmap.scm")
(load "query/tagged-list?.scm")
(load "query/test.scm")
(load "query/test-return.scm")
(load "query/the-assertions.scm")
(load "query/the-rules.scm")
(load "query/try-kill.scm")
(load "query/type.scm")
(load "query/unify-match.scm")
(load "query/uniquely-asserted.scm")
(load "query/use-index?.scm")
(load "query/var?.scm")
'done
