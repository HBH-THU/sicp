(load "self-evaluating?.scm")
(load "variable?.scm")
(load "lookup-variable-value.scm")
(load "quoted?.scm")
(load "text-of-quotation.scm")
(load "assignment?.scm")
(load "eval-assignment.scm")
(load "definition?.scm")
(load "eval-definition.scm")
(load "if?.scm")
(load "eval-if.scm")
(load "lambda?.scm")
(load "make-procedure.scm")
(load "lambda-parameters.scm")
(load "lambda-body.scm")
(load "begin?.scm")
(load "eval-sequence.scm")
(load "begin-actions.scm")
(load "cond?.scm")
(load "cond->if.scm")
(load "application?.scm")
(load "operator.scm")
(load "list-of-values.scm")
(load "operands.scm")

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))
