;;; Solutions copyright (C) 2007, Peter Danenberg; http://wizardbook.org
;;; Source code copyright (C) 1996, MIT; http://mitpress.mit.edu/sicp

(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (insts '())
        (entry-points '())
        (saved/restored-regs '())
        (assignment-sources (make-eq-hash-table)))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))
                 (list 'print-stack-statistics
                       (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (begin
                (allocate-register name)
                (lookup-register name)))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (add-inst! inst)
        (add-if-not-member! inst insts))
      (define (inst>? a b)
        (string>? (symbol->string (car a))
                  (symbol->string (car b))))
      (define (set-entry-points! points)
        (set! entry-points points))
      (define (add-saved/restored-reg! saved/restored-reg)
        (add-if-not-member! saved/restored-reg saved/restored-regs))
      (define (add-assignment-source! name source)
        (let ((sources (hash-table/get assignment-sources name #!default)))
          (if (default-object? sources)
              (hash-table/put! assignment-sources name (list source))
              (if (member source sources)
                  false
                  (hash-table/put! assignment-sources name
                                   (cons source sources))))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'set-entry-points!) set-entry-points!)
              ((eq? message 'entry-points) entry-points)
              ((eq? message 'add-inst!) add-inst!)
              ((eq? message 'insts) (sort insts inst>?))
              ((eq? message 'add-saved/restored-reg!) add-saved/restored-reg!)
              ((eq? message 'saved/restored-regs) saved/restored-regs)
              ((eq? message 'add-assignment-source!) add-assignment-source!)
              ((eq? message 'assignment-sources)
               (hash-table->alist assignment-sources))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))
