(load-option 'format)

(define (make-new-machine)
  (define make-breakpoints
    make-eq-hash-table)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (trace false)
        (current-label #!default)
        (current-inst 0)
        (breakpoints (make-breakpoints))
        (break-continuation '()))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))
                 (list 'print-stack-statistics
                       (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (let ((inst (car insts)))
                (if trace (format #t "~A: ~A~%" current-label (car inst)))
                (let ((proc (instruction-execution-proc inst))
                      (breakpoints-on-label (get-breakpoints current-label)))
                  (set! current-inst (1+ current-inst))
                  (cond ((and breakpoints-on-label
                              (memq current-inst breakpoints-on-label))
                         (set! break-continuation proc)
                         (format #t "~A: ~A~%" current-label current-inst))
                      (else (proc) (execute))))))))
      (define (set-breakpoint label n)
        (let ((breakpoints-at-label (get-breakpoints label)))
          (hash-table/put!
           breakpoints label
           (if breakpoints-at-label
               (cons n breakpoints-at-label)
               (list n)))))
      (define (get-breakpoints name)
        (let ((breakpoints-on-name (hash-table/get breakpoints name #!default)))
          (if (default-object? breakpoints-on-name)
              false
              breakpoints-on-name)))
      (define (proceed)
        (break-continuation)
        (execute))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'trace-on) (set! trace true))
              ((eq? message 'trace-off) (set! trace false))
              ((eq? message 'set-label!)
               (lambda (label)
                 (set! current-inst 0)
                 (set! current-label label)))
              ((eq? message 'get-label) current-label)
              ((eq? message 'set-breakpoint) set-breakpoint)
              ((eq? message 'cancel-all-breakpoints) (hash-table/clear! breakpoints))
              ((eq? message 'cancel-breakpoint)
               (lambda (label) (hash-table/remove! breakpoints label)))
              ((eq? message 'proceed) proceed)
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))
