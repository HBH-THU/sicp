(load "make-element.scm")
(load "content.scm")
(load "set-next!.scm")
(load "set-previous!.scm")
(load "next.scm")
(load "previous.scm")

(load-option 'format)
(define (make-deque)
  (let ((front-element '())
        (rear-element '()))
    (define (deque)
      (let ((new-deque (make-deque)))
        (if (not (empty-deque?))
            (begin
              ((new-deque 'set-front-element!) front-element)
              ((new-deque 'set-rear-element!) rear-element)))
        new-deque))
    (define (empty-deque?)
      (or (null? front-element)
          (null? rear-element)))
    (define (set-front-element! element)
      (set! front-element element))
    (define (set-rear-element! element)
      (set! rear-element element))
    (define (front-deque)
      (cond
       ((empty-deque?) (error "Empty deque on FRONT-accessor" (deque)))
       (else (content front-element))))
    (define (rear-deque)
      (cond
       ((empty-deque?) (error "Empty deque on REAR-accessor" (deque)))
       (else (content rear-element))))
    (define (front-insert-deque! item)
      (let ((new-element (make-element item)))
        (cond
         ((empty-deque?)
          (set-front-element! new-element)
          (set-rear-element! new-element))
         (else
          (set-previous! front-element new-element)
          (set-next! new-element front-element)
          (set-front-element! new-element))))
        (deque))
    (define (rear-insert-deque! item)
      (let ((new-element (make-element item)))
        (cond
         ((empty-deque?)
          (set-front-element! new-element)
          (set-rear-element! new-element))
         (else
          (set-next! rear-element new-element)
          (set-previous! new-element rear-element)
          (set-rear-element! new-element))))
      (deque))
    (define (front-delete-deque!)
      (cond
       ((empty-deque?) (error "Empty deque on FRONT-DELETE!" (deque)))
       (else
        (set-front-element! (next front-element))
        (if (not (empty-deque?))
            (set-previous! front-element '()))
        (deque))))
    (define (rear-delete-deque!)
      (cond
       ((empty-deque?) (error "Empty deque on FRONT-DELETE!" (deque)))
       (else
        (set-rear-element! (previous rear-element))
        (if (not (empty-deque?))
            (set-next! rear-element '()))
        (deque))))
    (define (print-elements start-element)
      (if (not (null? start-element))
          (begin 
            (format #t "~A " (content start-element))
            (print-elements (next start-element)))))
    (define (print-deque)
      (print-elements front-element)
      (newline))
    (define (dispatch m)
      (cond
       ((eq? m 'empty-deque?) empty-deque?)
       ((eq? m 'set-front-element!) set-front-element!)
       ((eq? m 'set-rear-element!) set-rear-element!)
       ((eq? m 'front-deque) front-deque)
       ((eq? m 'rear-deque) rear-deque)
       ((eq? m 'front-insert-deque!) front-insert-deque!)
       ((eq? m 'rear-insert-deque!) rear-insert-deque!)
       ((eq? m 'front-delete-deque!) front-delete-deque!)
       ((eq? m 'rear-delete-deque!) rear-delete-deque!)
       ((eq? m 'print-deque) print-deque)
       (else (error "Unknown request -- MAKE-DEQUE" m))))
    dispatch))
