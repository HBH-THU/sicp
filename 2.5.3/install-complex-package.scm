;;; Solutions copyright (C) 2007, Peter Danenberg; http://wizardbook.org
;;; Source code copyright (C) 1996, MIT; http://mitpress.mit.edu/sicp

(load "install-rectangular-package.scm")
(load "install-polar-package.scm")
(load "put.scm")
(load "attach-tag.scm")
(load "real-part.scm")
(load "imag-part.scm")
(load "magnitude.scm")
(load "angle.scm")
(load "equ?.scm")
(load "make-complex-from-real-imag.scm")
(load "put-coercion.scm")
(load "=zero?")
(load "tag-rectangular.scm")
(load "tag-polar.scm")
(load "tag-complex.scm")
(load "tag-rational.scm")
(load "numer.scm")
(load "type-tag.scm")
(load "denom.scm")
(load "rational?.scm")
(load "make-rational.scm")
(load "complex->rational.scm")
(load "div.scm")
(load "mul.scm")
(load "add.scm")
(load "sub.scm")
(load "put-irreducible.scm")

(define (install-complex-package)
  (install-rectangular-package)
  (install-polar-package)

  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))

  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))

  (define (tag z) (tag-complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'equ? '(complex complex) equ?)
  (put '=zero? '(complex) =zero?)
  (put 'negate '(complex) negate)

  ;; Coercions
  (put 'project '(complex) complex->rational)

  (define (rectangular->complex z)
    (put-irreducible 'rectangular->complex)
    (tag (tag-rectangular z)))
  (put 'raise '(rectangular) rectangular->complex)
  (put 'rectangular->complex '(rectangular) rectangular->complex)

  (define (polar->complex z)
    (put-irreducible 'polar->complex)
    (tag (tag-polar z)))
  (put 'raise '(polar) polar->complex)
  (put 'polar->complex '(polar) polar->complex)

  'done)
