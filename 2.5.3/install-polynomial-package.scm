;;; Solutions copyright (C) 2007, Peter Danenberg; http://wizardbook.org
;;; Source code copyright (C) 1996, MIT; http://mitpress.mit.edu/sicp

(load "install-dense-polynomial-package.scm")
(load "install-sparse-polynomial-package.scm")
(load "tag-polynomial.scm")
(load "get.scm")
(load "put.scm")
(load "add.scm")
(load "sub.scm")
(load "mul.scm")
(load "div.scm")
(load "greatest-common-divisor.scm")
(load "=zero?.scm")
(load "make-sparse-polynomial.scm")
(load "term-list.scm")
(load "put-irreducible.scm")
(load "tag-sparse.scm")
(load "equ?.scm")

(define (install-polynomial-package)
  (install-dense-polynomial-package)
  (install-sparse-polynomial-package)

  (define (tag p) (tag-polynomial p))
  (define (make-sparse-polynomial variable terms)
    ((get 'make-sparse 'sparse) variable terms))
  (define (make-dense-polynomial variable orders)
    ((get 'make-dense 'dense) variable orders))
  
  (put 'add '(polynomial polynomial)
       (lambda (addend augend) (tag (add addend augend))))
  (put 'sub '(polynomial polynomial)
       (lambda (minuend subtrahend) (tag (sub minuend subtrahend))))
  (put 'mul '(polynomial polynomial)
       (lambda (multiplicand multiplier) (tag (mul multiplicand multiplier))))
  (put 'div '(polynomial polynomial)
       (lambda (dividend divisor) (tag (div dividend divisor))))
  (put '=zero? '(polynomial) =zero?)
  (put 'make 'polynomial
       (lambda (variable terms) (tag (make-sparse-polynomial variable terms))))
  (put 'make-sparse 'polynomial
       (lambda (variable terms) (tag (make-sparse-polynomial variable terms))))
  (put 'make-dense 'polynomial
       (lambda (variable orders) (tag (make-dense-polynomial variable orders))))
  (put 'term-list '(polynomial) term-list)
  (put 'greatest-common-divisor '(polynomial polynomial)
       (lambda (p1 p2) (tag (greatest-common-divisor p1 p2))))
  (put 'reduce '(polynomial polynomial) (lambda (n d)
                                          (map (lambda (poly) (tag poly))
                                               (reduce n d))))

  (put 'equ? '(polynomial polynomial)
       equ?)
;;   (define (sparse->complex p)
;;     (put-irreducible 'sparse->complex)
;;     (tag (tag-sparse p)))
;;   (put 'raise '(sparse) sparse->complex)
;;   (put 'sparse->complex '(sparse) sparse->complex
;;  (put 'raise '(polynomial) (lambda (p) (tag (make-term #f #f))))
  'done)
