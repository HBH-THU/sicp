(load "definition?.scm")
(load "definition-value.scm")
(load "definition-variable.scm")
(load "make-unassigned.scm")
(load "make-let.scm")

(define (scan-out-definitions body)
  (define (scan expressions definitions values)
    (if (null? expressions)
        (list definitions values)
        (let ((expression (car expressions))
              (rest (cdr expressions)))
          (if (definition? expression)
              (scan rest (cons expression definitions) values)
              (scan rest definitions (cons expression values))))))
  (define (definitions scanned-expressions)
    (reverse (car scanned-expressions)))
  (define (values scanned-expressions)
    (reverse (cadr scanned-expressions)))
  (define (assignments definitions)
    (if (null? definitions)
        '()
        (let ((definition (car definitions)))
          (cons (make-assignment
                 (definition-variable definition)
                 (definition-value definition))
                (assignments (cdr definitions))))))
  (define (unassignments definitions)
    (if (null? definitions)
        '()
        (let ((definition (car definitions)))
          (cons (make-unassigned (definition-variable definition))
                (unassignments (cdr definitions))))))
  (let* ((scanned-expressions (scan body '() '()))
         (definitions (definitions scanned-expressions))
         (values (values scanned-expressions)))
    (if (null? definitions)
        values
        (list (make-let (unassignments definitions)
                        (append (assignments definitions)
                                values))))))
