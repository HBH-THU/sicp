#!/usr/bin/env chicken-scheme
(use debug sicp sicp-eval sicp-eval-amb srfi-1 test)

(with-require `((list ,list)
                (= ,=)
                (> ,>)
                (abs ,abs)
                (- ,-))
  (lambda (env)
    (ambeval*
     '(define (multiple-dwelling-original)
        (let ((baker (amb 1 2 3 4 5))
              (cooper (amb 1 2 3 4 5))
              (fletcher (amb 1 2 3 4 5))
              (miller (amb 1 2 3 4 5))
              (smith (amb 1 2 3 4 5)))
          (require
           (distinct? (list baker cooper fletcher miller smith)))
          (require (not (= baker 5)))
          (require (not (= cooper 1)))
          (require (not (= fletcher 5)))
          (require (not (= fletcher 1)))
          (require (> miller cooper))
          (require (not (= (abs (- smith fletcher)) 1)))
          (require (not (= (abs (- fletcher cooper)) 1)))
          (list (list 'baker baker)
                (list 'cooper cooper)
                (list 'fletcher fletcher)
                (list 'miller miller)
                (list 'smith smith))))
     env)
    
    (ambeval*
     '(define (multiple-dwelling-fast)
        (let ((baker (amb 1 2 3 4 5))
              (cooper (amb 1 2 3 4 5))
              (fletcher (amb 1 2 3 4 5))
              (miller (amb 1 2 3 4 5))
              (smith (amb 1 2 3 4 5)))
          (require (not (= baker 5)))
          (require (not (= cooper 1)))
          (require (not (= fletcher 5)))
          (require (not (= fletcher 1)))
          (require (not (= (abs (- smith fletcher)) 1)))
          (require (not (= (abs (- fletcher cooper)) 1)))
          (require (> miller cooper))
          (require
           (distinct? (list baker cooper fletcher miller smith)))
          (list (list 'baker baker)
                (list 'cooper cooper)
                (list 'fletcher fletcher)
                (list 'miller miller)
                (list 'smith smith))))
     env)
    (test-assert "The fast puzzle is faster than the original (after forcing a major GC)."
                 (> (begin (gc #t) (time+values (ambeval* '(multiple-dwelling-fast) env)))
                    (begin (gc #t) (time+values (ambeval* '(multiple-dwelling-original) env)))))))
