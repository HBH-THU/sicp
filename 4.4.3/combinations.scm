(define (combinations . combinanda)
  (define (make-variable)
    (let ((index 0))
      (lambda () (set! index (1+ index))
              (string->symbol (string-append "var-"
                                             (number->string index))))))
  (define (quote-variables quotanda)
    (map (lambda (quotandum) (cons 'list quotandum)) quotanda))
  (let ((next-variable (make-variable))
        (variables '()))
    (define (nested-map combinanda)
      (if (null? combinanda)
          `(let ((combination (list (list ,@variables))))
                (if (null? combinations)
                      (set! combinations combination)
                      (append! combinations combination)))
          (let ((variable (next-variable)))
            (if (null? variables)
                (set! variables (list variable))
                (append! variables (list variable)))
            `(map (lambda ,(list variable) ,(nested-map (cdr combinanda)))
                  ,variable))))
    (let ((evaluandum
           `(let ((combinations '()))
              ((lambda ,variables ,(nested-map combinanda))
                     ,@(quote-variables combinanda)) combinations)))
      (eval evaluandum (nearest-repl/environment)))))

(combinations '(1 2) '(3 4 5))

;; ((1 3) (1 4) (1 5) (2 3) (2 4) (2 5))
