;; (define (combinations a b)
;;   (map (lambda (a b) (list a b)) a (map (lambda (b) b) b)))
(define (make-variable)
  (let ((index 0))
    (lambda () (set! index (1+ index))
            (string->symbol (string-append "var-" (number->string index))))))

;; (define (combinations a b c)
;;   (let ((combinations '()))
;;     (map (lambda (a) (map (lambda (b) (map (lambda (c)
;;                                              (let ((combination (list (list a b c))))
;;                                                (if (null? combinations)
;;                                                    (set! combinations combination)
;;                                                    (append! combinations combination)))) c)) b)) a)
;;     combinations))

;;(define (combinations combinanda)
  
(define (combinations combinanda environment)
  (let ((next-variable (make-variable))
        (variables '()))
    (define (nested-map combinanda)
      (if (null? combinanda)
          (list 'let (list (list 'combination (list 'list (cons 'list variables))))
                (list 'if (list 'null? 'combinations)
                      (list 'set! 'combinations 'combination)
                      (list 'append! 'combinations 'combination)))
          (let ((variable (next-variable)))
            (if (null? variables)
                (set! variables (list variable))
                (append! variables (list variable)))
            (list 'map (list 'lambda (list variable) (nested-map (cdr combinanda))) variable))))
    (let ((evaluandum (list 'let (list (list 'combinations '(quote ()))) (cons (list 'lambda variables (nested-map combinanda)) combinanda) 'combinations)))
      (write-line evaluandum)
      (eval evaluandum environment))))

(combinations (list '(quote (1 2 3)) '(quote (4 5 6)) '(quote (7 8 9))) (the-environment))
