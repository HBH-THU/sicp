(define (combinations combinanda environment)
  (define (make-variable)
    (let ((index 0))
      (lambda () (set! index (1+ index))
              (string->symbol (string-append "var-" (number->string index))))))
  (define (quote-variables quotanda)
    (map (lambda (quotandum) (cons 'list quotandum)) quotanda))
  (let ((next-variable (make-variable))
        (variables '()))
    (define (nested-map combinanda)
      (if (null? combinanda)
          `(let ((combination ,(list 'list (cons 'list variables))))
                (if (null? combinations)
                      (set! combinations combination)
                      (append! combinations combination)))
          (let ((variable (next-variable)))
            (if (null? variables)
                (set! variables (list variable))
                (append! variables (list variable)))
            `(map (lambda ,(list variable) ,(nested-map (cdr combinanda))) ,variable))))
    (let ((evaluandum `(let ((combinations '())) ,(cons (list 'lambda variables (nested-map combinanda)) (quote-variables combinanda)) combinations)))
      (write-line evaluandum)
      (eval evaluandum environment))))

(combinations '((1 2 3) (4 5 6) (7 8 9)) (the-environment))
