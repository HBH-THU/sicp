(load "add-assertion-body.scm")
(load "add-assertion!.scm")
(load "add-rule-or-assertion!.scm")
(load "add-rule!.scm")
(load "always-true.scm")
(load "apply-a-rule.scm")
(load "apply-rules.scm")
(load "args.scm")
(load "assertion-to-be-added?.scm")
(load "binding-in-frame.scm")
(load "binding-value.scm")
(load "binding-variable.scm")
(load "check-an-assertion.scm")
(load "conclusion.scm")
(load "conjoin.scm")
(load "constant-symbol?.scm")
(load "contents.scm")
(load "contract-question-mark.scm")
(load "depends-on?.scm")
(load "disjoin.scm")
(load "display-line.scm")
(load "display-stream.scm")
(load "empty-conjunction?.scm")
(load "empty-disjunction?.scm")
(load "execute.scm")
(load "expand-question-mark.scm")
(load "extend-if-consistent.scm")
(load "extend-if-possible.scm")
(load "extend.scm")
(load "fetch-assertions.scm")
(load "fetch-rules.scm")
(load "find-assertions.scm")
(load "first-conjunct.scm")
(load "first-disjunct.scm")
(load "flatten-stream.scm")
(load "get-all-assertions.scm")
(load "get-all-rules.scm")
(load "get-indexed-assertions.scm")
(load "get-indexed-rules.scm")
(load "get.scm")
(load "get-stream.scm")
(load "indexable?.scm")
(load "index-key-of.scm")
(load "initialize-data-base.scm")
(load "input-prompt.scm")
(load "instantiate.scm")
(load "interleave-delayed.scm")
(load "interleave.scm")
(load "lisp-value.scm")
(load "make-binding.scm")
(load "make-new-variable.scm")
(load "make-table.scm")
(load "map-over-symbols.scm")
(load "microshaft-data-base.scm")
(load "negated-query.scm")
(load "negate.scm")
(load "new-rule-application-id.scm")
(load "output-prompt.scm")
(load "parallel-execute.scm")
(load "pattern-match.scm")
(load "predicate.scm")
(load "prompt-for-input.scm")
(load "put.scm")
(load "qeval.scm")
(load "query.scm")
(load "query-driver-loop.scm")
(load "query-syntax-process.scm")
(load "rename-variables-in.scm")
(load "rest-conjuncts.scm")
(load "rest-disjuncts.scm")
(load "rule-body.scm")
(load "rule-counter.scm")
(load "rule?.scm")
(load "simple-query.scm")
(load "singleton-stream.scm")
(load "store-assertion-in-index.scm")
(load "store-rule-in-index.scm")
(load "stream-append-delayed.scm")
(load "stream-flatmap.scm")
(load "tagged-list?.scm")
(load "test.scm")
(load "test-return.scm")
(load "the-assertions.scm")
(load "the-rules.scm")
(load "try-kill.scm")
(load "type.scm")
(load "unify-match.scm")
(load "use-index?.scm")
(load "var?.scm")
'done
