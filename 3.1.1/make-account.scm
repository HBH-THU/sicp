;;; Solutions copyright (C) 2007, Peter Danenberg; http://wizardbook.org
;;; Source code copyright (C) 1996, MIT; http://mitpress.mit.edu/sicp

(define (make-account balance init-password)
  (load-option 'format)
  (let ((max-attempts 7)
        (attempts 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (call-the-cops) "Cops called on your ass")
    (define (increment-attempts)
      (set! attempts (+ 1 attempts))
      attempts)
    (define (zero-attempts)
      (set! attempts 0)
      attempts)
    (define (check-password password)
      (if (eq? password init-password)
          (begin (zero-attempts) #t)
          (if (> (increment-attempts) max-attempts)
              (call-the-cops)
              (let* ((attempts-remaining (+ 1 (- max-attempts attempts)))
                     (nomination (if (= 1 attempts-remaining) "attempt" "attempts")))
              (format #f
                      "Invalid password: ~A ~A remaining"
                      (+ 1 (- max-attempts attempts))
                      nomination)))))
    (define (dispatch password m)
      (let ((result (check-password password)))
        (if (and (boolean? result) result)
            (cond ((eq? m 'withdraw) withdraw)
                  ((eq? m 'deposit) deposit)
                  (else (error "Unknown request -- MAKE-ACCOUNT"
                               m)))
            (lambda (x) result))))
    dispatch))
