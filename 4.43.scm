#!/usr/bin/env chicken-scheme

(use alist-lib debug sicp-eval sicp-eval-amb test)

(with-require `((list ,list) (eq? ,eq?) (cadr ,cadr) (caddr ,caddr) (debug ,(lambda x (debug x))))
  (lambda (env)
    (ambeval* '(define (map f l) (if (null? l) '() (cons (f (car l)) (map f (cdr l))))) env)
    (ambeval* '(define (for-each f l)
                 (if (null? l) 'ok
                     (begin
                       (f (car l))
                       (for-each f (cdr l))))) env)
    (ambeval* '(define father-name car) env)
    (ambeval* '(define father-daughter cadr) env)
    (ambeval* '(define father-yacht caddr) env)
    (ambeval* '(define (make-father name)
                 (list name
                       (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                       (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
              env)
    (ambeval* '(define (father-of daughter fathers)
                 (if (null? fathers)
                     ;; Daughter of no-one: when would this happen?
                     false
                     (let ((father (car fathers)))
                       (if (eq? daughter (father-daughter father))
                           father
                           (father-of daughter (cdr fathers))))))
              env)
    (ambeval*
     '(define (yachts)
        (let ((moore (make-father 'moore)))
          (require (eq? (father-daughter moore) 'mary))
          (require (eq? (father-yacht moore) 'lorna))
          (let ((downing (make-father 'downing)))
            (require (eq? (father-yacht downing) 'melissa))
            (let ((hall (make-father 'hall)))
              (require (eq? (father-yacht hall) 'rosalind))
              (let ((hood (make-father 'hood)))
                (require (eq? (father-yacht hood) 'gabrielle))
                (require (eq? (father-daughter hood) 'melissa))
                (let ((parker (make-father 'parker)))
                  (let ((fathers (list moore downing hall hood parker)))
                    (require (distinct? (map father-daughter fathers)))
                    (require (distinct? (map father-yacht fathers)))
                    (for-each (lambda (father) (require (distinct? (list (father-daughter father)
                                                                    (father-yacht father)))))
                      fathers)
                    (require (eq? (father-daughter parker)
                                  (father-yacht (father-of 'gabrielle fathers))))
                    (list (list 'moore moore)
                          (list 'downing downing)
                          (list 'hall hall)
                          (list 'hood hood)
                          (list 'parker parker)))))))))
     env)
    (test "Downing is Lorna's father."
          '(((moore (moore mary lorna))
             (downing (downing lorna melissa))
             (hall (hall gabrielle rosalind))
             (hood (hood melissa gabrielle))
             (parker (parker rosalind mary))))
          (ambeval* '(yachts) env))
    (ambeval*
     '(define (yachts-no-moore)
        (let ((moore (make-father 'moore)))
          (require (eq? (father-yacht moore) 'lorna))
          (let ((downing (make-father 'downing)))
            (require (eq? (father-yacht downing) 'melissa))
            (let ((hall (make-father 'hall)))
              (require (eq? (father-yacht hall) 'rosalind))
              (let ((hood (make-father 'hood)))
                (require (eq? (father-yacht hood) 'gabrielle))
                (require (eq? (father-daughter hood) 'melissa))
                (let ((parker (make-father 'parker)))
                  (let ((fathers (list moore downing hall hood parker)))
                    (require (distinct? (map father-daughter fathers)))
                    (require (distinct? (map father-yacht fathers)))
                    (for-each (lambda (father) (require (distinct? (list (father-daughter father)
                                                                    (father-yacht father)))))
                      fathers)
                    (require (eq? (father-daughter parker)
                                  (father-yacht (father-of 'gabrielle fathers))))
                    (list (list 'moore moore)
                          (list 'downing downing)
                          (list 'hall hall)
                          (list 'hood hood)
                          (list 'parker parker)))))))))
     env)
    (test "There are two solutions if we're not told about Moore."
          2
          (length (ambeval* '(yachts-no-moore) env)))))
