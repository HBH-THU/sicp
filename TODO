* 5.4.4, 5.5.1 - 5.5.7.

* Refactor.

  Replace the ad-hoc LOAD statements with SYNTAX-CASE-based packages Ã 
  la Chez, Chicken, SISC, &c.; and replace the one-to-one
  procedure->file mapping with more meaningful many-to-one groups.

  Standardize on SRFI-41 streams and SRFI-18 threads.

* Implement SRFI 55 for MIT-scheme, to make it MIT- and chicken-
  compatible.

  Second thought, there's alot of SRFI-0, -7, -55 controversy;
  how to decruft the solutions from implementation-specific
  requirements, and is it worth it?

  Being spoiled by Python, Java, &c., I like SRFI-55; but scheme48
  seems particularly unamenable thereto.  Implement the SRFIs myself,
  thereby bypassing scheme48 library mechanics?

  Alternatively, just `load' the goddamn SRFIs.

* Move to SRFI 78 (or 64) for testing.

* In addition to section-specific TODOs, we need tests for 1.1.7 -
  3.3.4.

* Replace recursive loads with content.scm + monkey-patches; or even
  the bona fide package-system.

  Alternatively: the long-overdue caching load, which refuses to
  reload based on the global file-table; and evaluates each file, say,
  in (the-environment).

  Minimal package example in MIT-scheme (thanks, mejja):
  http://mumble.net/~campbell/darcs/trc-testing/

* By analogy with 4.4.4, institute "contexts" which segregate source
  and exercises?

  [0-9]*.scm, context.scm and src/, for instance.
